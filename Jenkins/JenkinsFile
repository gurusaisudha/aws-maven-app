pipeline {
    agent {
       node {
    		label 'awsvm'
    		}
    }

     options    {
                timestamps()
                buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
                timeout(time: 120, unit: 'MINUTES')
                disableConcurrentBuilds()
                }

    parameters {
            string(name: 'appBranch', defaultValue: 'master', description: "Application Branch name of the Repo")
            string(name: 'gitURL', defaultValue: 'https://github.com/gurusaisudha/aws-maven-app.git', description: "Pass the Maven Repo Source Code GIT URL")
                }            


    stages {
        stage('checkout') {
            steps {
                git branch: appBranch, url: gitURL
            }
        }
        stage('Maven Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Docker Build') {
            steps {

                sh 'docker build . -f dockerfile_testapp -t gurusaisudha/awsmavendemo:latest'

            }
        }  

        stage('Docker Login') {
            steps {

            withCredentials([usernamePassword(credentialsId: 'dockerlogin', passwordVariable: 'dockerpwd', usernameVariable: 'dockeruser')]) {
    
 				   sh 'docker login -u ${dockeruser} -p ${dockerpwd}'
				}

            }
        }              

        stage('Docker Push') {
            steps {
                sh 'docker push gurusaisudha/awsmavendemo:latest'

            }
        } 
         stage ('K8SManiFest-Checkout') {
                steps {

                    git 'https://github.com/gurusaisudha/aws-k8s-CICD.git'

                }
            }

        stage ('Kubernetes AutoDeployment') {
  

                steps {

                    dir('manifests')
                {

                    sh 'ls -l'
                    // kubectl apply -f <fileName>.yml
                    kubectl{
                     withCredentials([usernamePassword(credentialsId: 'kuberneteslogin', passwordVariable: 'kubernetespwd', usernameVariable: 'kubernetesuser')])
                                      {
                                          sh 'login [-u] ${kubernetesuser} [-p] ${kubernetespwd}' 
                                        
                                        } apply deployment.yml
                    }
                                      
                   withCredentials([usernamePassword(credentialsId: 'kuberneteslogin', passwordVariable: 'kubernetespwd', usernameVariable: 'kubernetesuser')])
                                      {
                                          sh 'login [-u] ${kubernetesuser} [-p] ${kubernetespwd}' 
                                          kubectl apply -f service.yml
                                        } 
                   
                    withCredentials([usernamePassword(credentialsId: 'kuberneteslogin', passwordVariable: 'kubernetespwd', usernameVariable: 'kubernetesuser')])
                                      {
                                          sh 'login [-u] ${kubernetesuser} [-p] ${kubernetespwd}' 
                                         kubectl rollout restart deployment/java-app-deployment
                                        } 
                    
                    echo "kubernetes deployment is done"

                    sh 'kubectl get deployments'
                    sh 'sleep 100 ; kubectl get services'
                    
                }

                    }
                }
        stage('Archive and clean workspace') {
                steps {
                    
                    //archive 'target/demo*.jar'
                    archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false
                    cleanWs()
                }

            }              

    }
}
